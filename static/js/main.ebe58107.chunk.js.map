{"version":3,"sources":["components/Filter/Filter.module.css","components/Container/Container.module.css","components/ContactForm/ContactsForm.module.css","components/Container/Container.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","Container","children","className","s","container","ContactList","contacts","onDeleteContact","contactList","map","id","name","number","contact","nameText","deleteBtn","type","onClick","ContactForm","onSubmit","useState","setName","setNumber","nameInputId","shortid","generate","numberInputId","handleNameChange","e","target","value","reset","form","preventDefault","formLabel","htmlFor","formInput","placeholder","onChange","addBtn","Filter","filterLabel","filterInput","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","console","log","find","toLowerCase","alert","trim","test","PrevStateContacts","currentTarget","normalizedFilter","includes","getFilteredContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebe58107.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__1ERlN\",\"filterInput\":\"Filter_filterInput__22TcN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__5CMhl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__2fm7p\",\"formLabel\":\"ContactsForm_formLabel__yywXz\",\"formInput\":\"ContactsForm_formInput__3KLSZ\",\"addBtn\":\"ContactsForm_addBtn__3Xfxq\"};","import React from 'react';\r\nimport s from './Container.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className={s.container}>{children}</div>;\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport s from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ul className={s.contactList}>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li className={s.contact} key={id}>\r\n        <p className={s.nameText}>\r\n          {name} : {number}\r\n        </p>\r\n\r\n        <button\r\n          className={s.deleteBtn}\r\n          type=\"button\"\r\n          onClick={() => onDeleteContact(id)}\r\n        >\r\n          Удалить\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      number: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import  { useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport s from './ContactsForm.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ContactForm({onSubmit}) {\r\n  const [name, setName] = useState('')\r\n  const[number,setNumber] = useState('')\r\n\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const handleNameChange = e => {\r\n    const { name, value } = e.target;\r\n    \r\n      switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };  \r\n\r\n  const onSubmitForm = e => {\r\n    e.preventDefault();\r\n    onSubmit(name,number);\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setName('')\r\n    setNumber('')\r\n  };  \r\n    return (\r\n      <form className={s.form} onSubmit={onSubmitForm}>\r\n        <label className={s.formLabel} htmlFor={nameInputId}>\r\n          Name\r\n          <input\r\n            className={s.formInput}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder = \"John Doe\"\r\n            value={name}\r\n            onChange={handleNameChange}\r\n            id={nameInputId}\r\n          ></input>\r\n        </label>\r\n        <label className={s.formLabel} htmlFor={numberInputId}>\r\n          Number\r\n          <input\r\n            className={s.formInput}\r\n            type=\"phone\"\r\n            name=\"number\"\r\n            placeholder=\"111-11-11\"\r\n            value={number}\r\n            onChange={handleNameChange}\r\n            id={numberInputId}\r\n          ></input>\r\n        </label>\r\n        <button className={s.addBtn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   nameInputId = shortid.generate();\r\n//   numberInputId = shortid.generate();\r\n\r\n//   handleNameChange = e => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   onSubmitForm = e => {\r\n//     e.preventDefault();\r\n//     this.props.onSubmit(this.state);\r\n\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({ name: '', number: '' });\r\n//   };\r\n//   render() {\r\n//     return (\r\n//       <form className={s.form} onSubmit={this.onSubmitForm}>\r\n//         <label className={s.formLabel} htmlFor={this.nameInputId}>\r\n//           Name\r\n//           <input\r\n//             className={s.formInput}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             placeholder = \"John Doe\"\r\n//             value={this.state.name}\r\n//             onChange={this.handleNameChange}\r\n//             id={this.nameInputId}\r\n//           ></input>\r\n//         </label>\r\n//         <label className={s.formLabel} htmlFor={this.numberInputId}>\r\n//           Number\r\n//           <input\r\n//             className={s.formInput}\r\n//             type=\"phone\"\r\n//             name=\"number\"\r\n//             placeholder=\"111-11-11\"\r\n//             value={this.state.number}\r\n//             onChange={this.handleNameChange}\r\n//             id={this.numberInputId}\r\n//           ></input>\r\n//         </label>\r\n//         <button className={s.addBtn} type=\"submit\">\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n// ContactForm.propTypes = {\r\n//   onSubmit: PropTypes.func.isRequired,\r\n// };\r\n\r\n// export default ContactForm;","import React from 'react';\r\nimport s from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={s.filterLabel}>\r\n    Search contact\r\n    <input\r\n      className={s.filterInput}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\nexport default Filter;\r\n","import { useState, useEffect } from 'react';\r\nimport shortid from 'shortid';\r\nimport Container from './components/Container/Container';\r\nimport ContactList from './components/ContactList';\r\nimport ContactForm from './components/ContactForm';\r\nimport Filter from './components/Filter';\r\n\r\nexport default function App() {\r\n  const [contacts, setContacts] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\r\n  });\r\n  const [filter, setFilter] = useState('');\r\n  useEffect(() => {\r\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const addContact = (name, number) => {\r\n    console.log('Добавить контакт');\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    if (\r\n      contacts.find(\r\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n      )\r\n    ) {\r\n      alert(`${name} is already in contacts.`);\r\n    } else if (contacts.find(contact => contact.number === number)) {\r\n      alert(`${number} is already in contacts.`);\r\n    } else if (name.trim() === '' || number.trim() === '') {\r\n      alert(\"Enter the contact's name and number phone!\");\r\n    } else if (!/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number)) {\r\n      alert('Enter the correct number phone!');\r\n    } else {\r\n      setContacts(PrevStateContacts => [contact, ...PrevStateContacts]);\r\n    }\r\n  };\r\n\r\n  const deleteContact = contactId => {\r\n    setContacts(contacts.filter(contact => contact.id !== contactId));\r\n  };\r\n\r\n  // const formSubmitHandler = data => {\r\n  //   console.log(data);\r\n  // };\r\n\r\n  const changeFilter = e => {\r\n    setFilter(e.currentTarget.value);\r\n  };\r\n\r\n  const getFilteredContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm onSubmit={addContact} contacts={contacts} />\r\n      <h2>Contacts</h2>\r\n      <Filter value={filter} onChange={changeFilter} />\r\n      <ContactList\r\n        contacts={getFilteredContacts()}\r\n        onDeleteContact={deleteContact}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\n// class App extends Component {\r\n//   state = {\r\n//     contacts: [],\r\n//     filter: '',\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     const contacts = localStorage.getItem('contacts');\r\n//     const parsedContacts = JSON.parse(contacts);\r\n\r\n//     if (parsedContacts) {\r\n//       this.setState({ contacts: parsedContacts });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevState, prevProps) {\r\n//     const nextContacts = this.state.contacts;\r\n//     const prevContacts = prevState.contacts;\r\n\r\n//     if (nextContacts !== prevContacts) {\r\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\r\n//     }\r\n//   }\r\n\r\n//   addContact = ({ name, number }) => {\r\n//     const contact = {\r\n//       id: shortid.generate(),\r\n//       name,\r\n//       number,\r\n//     };\r\n\r\n//     const { contacts } = this.state;\r\n\r\n//     if (\r\n//       contacts.find(\r\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n//       )\r\n//     ) {\r\n//       alert(`${name} is already in contacts.`);\r\n//     } else if (contacts.find(contact => contact.number === number)) {\r\n//       alert(`${number} is already in contacts.`);\r\n//     } else if (name.trim() === '' || number.trim() === '') {\r\n//       alert(\"Enter the contact's name and number phone!\");\r\n//     } else if (!/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number)) {\r\n//       alert('Enter the correct number phone!');\r\n//     } else {\r\n//       this.setState(({ contacts }) => ({\r\n//         contacts: [contact, ...contacts],\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   deleteContact = contactId => {\r\n//     this.setState(prevState => ({\r\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n//     }));\r\n//   };\r\n\r\n//   formSubmitHandler = data => {\r\n//     console.log(data);\r\n//   };\r\n\r\n//   changeFilter = e => {\r\n//     this.setState({ filter: e.currentTarget.value });\r\n//   };\r\n\r\n//   getFilteredContacts = () => {\r\n//     const { contacts, filter } = this.state;\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//     return contacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n//   };\r\n\r\n//   render() {\r\n//     const { contacts, filter } = this.state;\r\n//     const filteredContacts = this.getFilteredContacts();\r\n\r\n//     return (\r\n//       <Container>\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm onSubmit={this.addContact} contacts={contacts} />\r\n//         <h2>Contacts</h2>\r\n//         <Filter value={filter} onChange={this.changeFilter} />\r\n//         <ContactList\r\n//           contacts={filteredContacts}\r\n//           onDeleteContact={this.deleteContact}\r\n//         />\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n// export default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__UOKiz\",\"contact\":\"ContactList_contact__w077a\",\"nameText\":\"ContactList_nameText__1IpdP\",\"deleteBtn\":\"ContactList_deleteBtn__2OjVL\"};"],"sourceRoot":""}